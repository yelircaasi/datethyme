from typing import Protocol, Self


class TimeProtocol(Protocol):
    hour: int
    minute: int
    second: float

    def __bool__(self) -> bool: ...
    def __eq__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

    @classmethod
    def parse(cls, str) -> Self: ...

    def to(self, __other, name: str | None = None) -> "SpanProtocol": ...
    def span(self, __other, name: str | None = None) -> "SpanProtocol": ...

    @property
    def ordinal(self) -> float: ...

    @classmethod
    def from_ordinal(cls, ordinal: float) -> Self: ...

    def minutes_to(self, other) -> float: ...

    def minutes_from(self, other) -> float: ...

    def add_minutes(self, mins: float) -> Self: ...

    def round_hours(self) -> "TimeProtocol": ...

    def round_minutes(self) -> "TimeProtocol": ...

    def round_seconds(self) -> "TimeProtocol": ...


class SpanProtocol[T: TimeProtocol](Protocol):
    @property
    def start(self) -> T: ...
    @property
    def end(self) -> T: ...
    @property
    def minutes(self) -> float: ...
    @property
    def midpoint(self) -> T: ...

    def __init__(self, start: T, end: T) -> None: ...
    def __bool__(self) -> bool: ...
    def snap_start_to(self, new_start: T) -> "SpanProtocol[T]": ...
    def snap_end_to(self, new_end: T) -> "SpanProtocol[T]": ...
    def shift_start_rigid(self, new_start: T) -> "SpanProtocol[T]": ...
    def shift_end_rigid(self, new_end: T) -> "SpanProtocol[T]": ...
    def split(self, cut_point: T) -> "tuple[SpanProtocol[T], SpanProtocol[T]]": ...
    def interior_point(self, alpha: float) -> T: ...
    def contains(self, other) -> bool: ...
    def round_hours(self, round_to: int) -> "SpanProtocol[T]": ...
    def round_minutes(self, round_to: int) -> "SpanProtocol[T]": ...
    def round_seconds(self, round_to: float) -> "SpanProtocol[T]": ...

    def affine_transform(
        self,
        scale_factor: float,
        new_start: T | None = None,
        new_end: T | None = None,
        min_minutes: int | float = 5,
    ) -> "SpanProtocol[T]": ...
