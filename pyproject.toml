[tool.poetry]
name = "datethyme"
version = "0.2.0"
description = ""
authors = ["Isaac Riley <isaac.r.riley@proton.me>"]
readme = "README.md"
packages = [{ include = "datethyme", from = "src" }]

[tool.poetry.dependencies]
# --- core -----------------------------------------------
python           = ">3.12,<3.14"
pydantic         = ">=2.8"
deal             = ">4.24"
multipledispatch = ">=1"

[tool.poetry.group.dev.dependencies]
deply        = ">=0.5.0"
modulegraph  = ">=0.19.6"
snakefood3   = ">=0.0.7"
grimp        = ">=3.5"
pyflame      = ">=0.3.2"

[tool.poetry.group.util.dependencies]
ipython       = ">=8.21"
lefthook      = "^1.8.2"
pre-commit    = ">=3.7"
black         = ">=24.8"
isort         = ">=5.13"
mypy          = ">=1.10"
pylint        = ">=3.1"
semver        = ">=3.0"
cyclonedx-bom = ">=4.4"
tomli         = ">=2.0"
pydeps        = ">=1.12"
rust-just     = ">=1.37.0"
ruff          = ">=0.8.1"
scalene       = ">=1.5.49"
bandit = "^1.8.0"

[tool.poetry.group.test.dependencies]
pytest           = ">=8.3"
pytest-mock      = ">=3.14"
pytest-testmon   = ">=2.1"
pytest-cov       = ">=5.0"
pytest-loguru    = ">=0.2"
pytest-profiling = "^1.8.1"
coverage         = ">=7.5.4"
hypothesis       = ">6"

[tool.poetry.group.docs.dependencies]
mkdocs               = ">=1.6"
mkdocstrings         = ">=0.27.0"
mkdocstrings-python  = ">=1.11"
mkdocs-minify-plugin = ">=0.8"
mkdocs-dracula-theme = ">=1.0.7"
mkdocs-plugin-inline-svg = "^0.1.0"
mkdocs-material = "<9.5"

[tool.pytest.ini_options]
cache_dir = ".cache/pytest_cache"
testpaths = ["./tests"]
addopts = "--ignore=data,src"
markers = [
    "pure: no IO or side effects (refers to the test itself)",
    "read: requires a read operation",
    "write: requires a write operation",
]

[tool.coverage.run]
omit = ["src/datethyme/__main__.py"]
data_file = ".cache/coverage"


[tool.ruff]
include = ["pyproject.toml", "*.py"]
exclude = [".venv/", "*.pyi", "scratch/"]
cache-dir = ".cache/ruff_cache"
target-version = "py312"
line-length = 100
indent-width = 4

[tool.ruff.format]
exclude = [".venv/", "*.pyi"]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
exclude = [".venv/", "*.pyi", "scratch/*"]
select = [
    "E",
    "F",
    "W",
    "C90",
    "I",
    "N",
    # "D",
    "UP",
    "YTT",
    # "ANN",
    "ASYNC",
    # "S",
    # "BLE",
    # "FBT",
    # "B",
    # "A",
    # "COM",
    # "CPY",
    # "C4",
    # "DTZ",
    # "T10",
    # "DJ",
    # "EM",
    # "EXE",
    # "FA",
    # "ISC",
    # "ICN",
    # "LOG",
    # "G",
    # "INP",
    # "PIE",
    # "T20",
    # "PYI",
    # "PT",
    # "Q",
    # "RSE",
    # "RET",
    # "SLF",
    # "SLOT",
    # "SIM",
    # "TID",
    # "TC",
    # "INT",
    # "ARG",
    # "PTH",
    # "TD",
    # "FIX",
    # "ERA",
    # "PD",
    # "PGH",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "TRY",
    "FLY",
    "NPY",
    # "FAST",
    # "AIR",
    # "PERF",
    "FURB",
    #=> "DOC",
    "RUF",
]
ignore = [
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D205",    # 1 blank line required between summary line and description
    "PLR0124", # "Name compared with itself"
    "N802",    # "Checks for functions names that do not follow the snake_case naming convention."
    "N803",    # "Checks for argument names that do not follow the snake_case convention."
    "N806",    # Checks for the use of non-lowercase variable names in functions.
    "N815",    # Checks for class variable names that follow the mixedCase convention.
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "PLR0913", # Checks for function definitions that include too many arguments (default 5).
    "RET504",  # Checks for variable assignments that immediately precede a return of the assigned variable.
    "RUF001",  # Checks for ambiguous Unicode characters in strings.
    "TRY002",  # Checks for code that raises Exception or BaseException directly.
    "TRY003",  # Checks for long exception messages that are not defined in the exception class itself.
    "TRY201",  # Checks for needless exception names in raise statements.
    "TRY300",  # Checks for return statements in try blocks.
    "TRY301",  # Checks for raise statements within try blocks. The only raises caught are those that throw exceptions caught by the try statement itself.
]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
suppress-none-returning = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
ignore_missing_imports = true
disable_error_code = ["prop-decorator"]
strict = false
python_executable = ".venv/bin/python"
exclude = "(.venv/.*|.cache.*|scratch.*)"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
